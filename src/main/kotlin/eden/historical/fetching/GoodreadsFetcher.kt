package eden.historical.fetching

import eden.historical.Settings

private data class LoginTokens(val csrfToken: String, val n: String)

class GoodreadsFetcher :  RequiresLoginFetcher<JsoupFetcher>(JsoupFetcher()) {
    override fun doLogin() {
        println("Not logged in to GoodReads, logging in now.")
        val tokens = getLoginTokens()
        val loginData = makeloginData(tokens)
        val document = nestedFetcher.post(Settings.goodreadsLoginUrl, data = loginData)
        println("Logged in to GoodReads")
    }

    private fun makeloginData(data: LoginTokens) : Map<String, String> = mapOf(
            "appActionToken" to "kZRkEQN8BBwayTnyvyyj2BeUaSbAAj3D",
            "appAction" to "SIGNIN",
            "siteState" to "ape:OTkzZDgzOGRkMjFhMjk0ODIyNGVkMmU4M2IzOTk0N2Y=",
            "openid.return_to" to "ape:aHR0cHM6Ly93d3cuZ29vZHJlYWRzLmNvbS9hcC1oYW5kbGVyL3NpZ24taW4=",
            "prevRID" to "ape:R0gwTlNKUUVaS01BWU41N1BLRUI=",
            "workflowState" to "eyJ6aXAiOiJERUYiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiQTI1NktXIn0.hSWZuvzcF_tJscen5SE7YwTza8GHTbjpSEXi_NCRlof5j6fCLPGBQA._LwsW7D606AZUSnj.r0jJVmz8A-aqiNOS1R_vAeNVUIew4oCa1DGNNbjQmTgWlObStF8iUjeG-FTBYbkx7B4RlwAynAoVAT64d7fpOdXE4nNvlLlovmTRxmT9YhjYvG3woM0-OkBD2hZUAJnKs9yCvgjxU6eY_wEnmd45jXfap1zL6_rHGWjCgikXCCvvpn_1LtXwduobSu9O6xmUSX-WymAimimk-RK7NhlPiwJXUuDJHMabxrqi-Ro6hsyd_biWpDsl2yOObkbsZvS6uIwUJ4IgbCk3DxiKap5jMjVQTAN1ZOXFzRxZzda5lBv-vcfoFr2tGiE_FOv_IV-DXwsq0BXwCVoshAGrgJ3AebdM5oTRBPfFsfKInm4tlHViYFqa1Ai-Cawf8Ytb53laTFwTP3Gdbw.KK9GIpDoIpU599vOBx-exg",
            "email" to "martin.s.eden@protonmail.ch",
            "create" to "0",
            "password" to "hrfxrbboLASMY4aoHvX2",
            "encryptedPasswordExpected" to "",
            "metadata1" to "ECdITeCs:"
    )

    private fun getLoginTokens() : LoginTokens {
        println("Retrieving CSRF token from login page")
        val doc = nestedFetcher.get(Settings.goodreadsLoginUrl)

        print(doc.html())
        val formInputs = doc.select("div#emailForm form input")
        print(formInputs.html())
        val csrfToken = formInputs
            .first { it.attr("name") == "authenticity_token" }
            .attr("value")
        val n = formInputs
            .first { it.attr("name") == "n" }
            .attr("value")
        return LoginTokens(csrfToken, n)
    }

}